# coding=utf-8
import json
import os
from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage
from django.http import HttpResponse
from django.shortcuts import render, redirect

# Create your views here.
from ShanShan.settings import MEDIA_ROOT, MEDIA_URL
from shan.models import Project

PROJECTS_PER_PAGE = 4
DOMAIN_NAME = 'projectdomain'


def index(request):
    # whether we have new project result
    result = -1
    if request.GET.get('result') == '1':
        result = 1
    elif request.GET.get('result') == '0':
        result = 0
    #try to get the current like count
    count = 1458  #default is this value, for fun
    from os import environ

    if environ.get("APP_NAME", ""):
        import pylibmc as memcache

        mc = memcache.Client()
        if not mc.get('count'):
            mc.set("count", "1458")
        count = mc.get("count")
    #get some projects
    projects = Project.objects.filter(state=True)
    page = request.GET.get('page')
    projects = _paginator(request, projects, page=page, size=PROJECTS_PER_PAGE)
    return render(request, 'shan/index.html', {'projects': projects, 'result': result, 'count': count})


# common paginator
def _paginator(request, objs, page=1, size=PROJECTS_PER_PAGE):
    paginator = Paginator(objs, size)
    try:
        objs = paginator.page(page)
    except PageNotAnInteger:
        objs = paginator.page(1)
    except EmptyPage:
        objs = paginator.page(paginator.num_pages)
    return objs  # actually objs is a page, so in 'paginator.html', paginator means page


def newproject(request):
    if request.method == 'POST':
        project = Project()
        project.name = request.POST.get('name')
        project.email = request.POST.get('email')
        project.organiser = request.POST.get('organiser')
        project.target = float(request.POST.get('target'))
        project.content = request.POST.get('content')
        project.imgfile = _uploadToStorage(request.FILES['imgfile'])
        project.state = True
        project.save()
        return redirect('/?result=1')
    return redirect('/?result=0')


def _uploadToStorage(content):
    from os import environ

    if environ.get("APP_NAME", ""):
        import sae.const

        access_key = sae.const.ACCESS_KEY
        secret_key = sae.const.SECRET_KEY
        appname = sae.const.APP_NAME
        domain_name = DOMAIN_NAME

        import sae.storage

        s = sae.storage.Client()
        ob = sae.storage.Object(content.read())
        url = s.put(domain_name, content.name, ob)
    else:
        project_pictures = MEDIA_ROOT + '/projects/'
        if not os.path.exists(project_pictures):
            os.makedirs(project_pictures)
        filename = project_pictures + content.name + '.jpg'
        with open(filename, 'wb+') as destination:
            for chunk in content.chunks():
                destination.write(chunk)
        url = MEDIA_URL + 'projects/' + content.name + '.jpg'
    return url


def like(request):
    from os import environ

    if environ.get("APP_NAME", ""):
        import pylibmc as memcache

        mc = memcache.Client()
        if not mc.get('count'):
            mc.set("count", "0")
        mc.incr("count")
        return HttpResponse(mc.get('count'))
    else:
        current = request.POST.get('current')
        print('current: ' + current)
        if not current:
            current = 1
        else:
            current = int(current) + 1
        return HttpResponse(current)


# import qiniu
# import qiniu.conf
# import qiniu.rs
# import qiniu.io
# BUCKET_NAME = "shanshanlaichi"
# qiniu.conf.ACCESS_KEY = "jkGarjPB6G-3YqyDwj2JU_CzianXBn5OLNpnhmaC"
# qiniu.conf.SECRET_KEY = "qHMNLS9x2lPD2M-oF-Dx_IPPUPfdP9kCbsvrAT9T"
#
# def uptoken(request):
# policy = qiniu.rs.PutPolicy(BUCKET_NAME)
# token = policy.token()
# data = {'uptoken': token}
# return HttpResponse(json.dumps(data), content_type="application/json")

