# coding=utf-8

from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage
from django.http import HttpResponse
from django.shortcuts import render, redirect

# Create your views here.
from django.views.decorators.csrf import csrf_exempt
from ShanShan.settings import MEDIA_ROOT, MEDIA_URL
from shan.models import Project, Questionnair

import os
from os import environ
import json

PROJECTS_PER_PAGE = 6

# go to index page
def index(request):
    # whether we have new project result
    result = -1
    if request.GET.get('result'):
        result = int(request.GET.get('result'))
    # try to get the current like count
    count = 527  # default is this value, just for fun
    if environ.get("APP_NAME", ""):  # if online, get like count from memcache
        import pylibmc as memcache

        mc = memcache.Client()
        if not mc.get('count'):
            mc.set("count", "527")
        count = mc.get("count")
    # get some projects to show
    projects = Project.objects.filter(state=True).order_by('id')
    page = request.GET.get('page')
    projects = _paginator(request, projects, page=page, size=PROJECTS_PER_PAGE)
    return render(request, 'shan/index.html', {'projects': projects, 'result': result, 'count': count})


# common paginator
def _paginator(request, objs, page=1, size=PROJECTS_PER_PAGE):
    paginator = Paginator(objs, size)
    try:
        objs = paginator.page(page)
    except PageNotAnInteger:
        objs = paginator.page(1)
    except EmptyPage:
        objs = paginator.page(paginator.num_pages)
    return objs  # actually objs is a page, so in 'paginator.html', paginator means page


# new project
def newproject(request):
    if request.method == 'POST':
        try:
            project = Project()
            project.name = request.POST.get('name')
            project.email = request.POST.get('email')
            project.organiser = request.POST.get('organiser')
            project.target = float(request.POST.get('target'))
            project.content = request.POST.get('content')
            project.imgfile = _uploadToStorage(request.FILES['imgfile'])  # save image!!!
            project.state = True
            project.save()
            return redirect('/?result=1')
        except:
            return redirect('/?result=0')
    return redirect('/?result=0')


# new questionnair
def newquestionnair(request):
    if request.method == 'POST':
        try:
            question = Questionnair()
            question.name = request.POST.get('name')
            question.email = request.POST.get('email')
            question.url = request.POST.get('url')
            question.money = int(request.POST.get('money'))
            question.organiser = request.POST.get('organiser')
            question.state = True
            question.save()
            return redirect('/?result=2')
        except:
            return redirect('/?result=3')
    return redirect('/?result=3')


DOMAIN_NAME = 'projectdomain'  # SAE storage
# upload image to storage
def _uploadToStorage(content):
    if environ.get("APP_NAME", ""):  # if online, use SAE storage service
        import sae.const

        access_key = sae.const.ACCESS_KEY
        secret_key = sae.const.SECRET_KEY
        appname = sae.const.APP_NAME
        domain_name = DOMAIN_NAME

        import sae.storage

        s = sae.storage.Client()
        ob = sae.storage.Object(content.read())
        url = s.put(domain_name, content.name, ob)
    else:
        project_pictures = MEDIA_ROOT + '/projects/'
        if not os.path.exists(project_pictures):
            os.makedirs(project_pictures)
        filename = project_pictures + content.name + '.jpg'
        with open(filename, 'wb+') as destination:
            for chunk in content.chunks():
                destination.write(chunk)
        url = MEDIA_URL + 'projects/' + content.name + '.jpg'
    return url


# user likes the site
def like(request):
    if environ.get("APP_NAME", ""):  # if online, use SAE memcache service
        import pylibmc as memcache

        mc = memcache.Client()
        if not mc.get('count'):
            mc.set("count", "0")
        mc.incr("count")
        return HttpResponse(mc.get('count'))
    else:
        current = request.POST.get('current')
        print('current: ' + current)
        if not current:
            current = 1
        else:
            current = int(current) + 1
        return HttpResponse(current)


import pingpp

APP_ID = 'app_Tq1mjLbTunH81qPi'
TEST_KEY = 'sk_test_TSO0OKHe9uX1qfLm588i9ijT'
LIVE_KEY = ''  # current no use
pingpp.api_key = TEST_KEY

# ping++ client request, client has no csrf code
@csrf_exempt
def pay(request):
    if request.method == 'POST':
        import uuid
        # c06a6247-7079-11e4-9e7d-1040f397bb48 -> `c06a6247` as order_no
        orderno = str(uuid.uuid1())[0:8]
        channel = request.POST.get('channel')
        amount = int(request.POST.get('amount'))
        subject = request.POST.get('subject')
        body = request.POST.get('body')
        pid = int(request.POST.get('pid'))
        project = Project.objects.get(pk=pid)
        # print(channel+" "+amount)
        remoteip = request.META['REMOTE_ADDR']

        if channel == 'points':
            try:
                project.pcount = project.pcount + 1
                project.mcount = project.mcount + amount / 100.0
                project.save()
                result = {'result': 'yes'}
            except:
                result = {'result': 'no'}
            return HttpResponse(json.dumps(result), content_type="application/json")

        ch = pingpp.Charge.create(
            order_no=orderno,
            channel=channel,
            amount=amount,
            subject=subject,
            body=body,
            currency='cny',
            app=dict(id=APP_ID),
            client_ip=remoteip  # must be an IP address
        )
        return HttpResponse(json.dumps(ch), content_type="application/json")
    else:
        return render(request, 'shan/pingpp.html')


@csrf_exempt
def paypingqr(request):
    if request.method == 'POST':
        import uuid
        # c06a6247-7079-11e4-9e7d-1040f397bb48 -> `c06a6247` as order_no
        orderno = str(uuid.uuid1())[0:8]
        channel = request.POST.get('channel')
        amount = int(request.POST.get('amount'))

        # subject = request.POST.get('subject')
        # body = request.POST.get('body')
        # pid = int(request.POST.get('pid'))
        # project = Project.objects.get(pk=pid)
        # print(channel+" "+amount)

        subject = 'demo subject'
        body = 'demo body'

        remoteip = request.META['REMOTE_ADDR']

        ch = pingpp.Charge.create(
            order_no=orderno,
            channel=channel,
            amount=amount,
            subject=subject,
            body=body,
            currency='cny',
            app=dict(id=APP_ID),
            client_ip=remoteip  # must be an IP address
        )
        return HttpResponse(json.dumps(ch), content_type="application/json")
    else:
        return render(request, 'shan/pingpp.html')

@csrf_exempt
def updatep(request):
    if request.method == 'POST':
        amount = int(request.POST.get('amount'))
        pid = int(request.POST.get('pid'))
        project = Project.objects.get(pk=pid)
        #print(str(pid)+" "+str(amount))

        try:
            project.pcount = project.pcount + 1
            project.mcount = project.mcount + amount / 100.0
            project.save()
            result = {'result': 'yes'}
        except:
            result = {'result': 'no'}
        return HttpResponse(json.dumps(result), content_type="application/json")
    else:
        return render(request, 'shan/pingppupdate.html')


@csrf_exempt
def updateq(request):
    if request.method == 'POST':
        #amount = int(request.POST.get('amount'))
        qid = int(request.POST.get('qid'))
        question = Questionnair.objects.get(pk=qid)

        try:
            question.pcount = question.pcount + 1
            #project.mcount = project.mcount + amount / 100.0
            question.save()
            result = {'result': 'yes'}
        except:
            result = {'result': 'no'}
        return HttpResponse(json.dumps(result), content_type="application/json")
    else:
        return render(request, 'shan/pingppupdate.html')


def notify(request):
    print request.method


# build a json string from a project, no state and startdate
# use json.dumps to ensure making URLencode
def _buildJsonProject(project):
    data = '{id:' + json.dumps(str(project.id)) + ',name:' + json.dumps(project.name) \
           + ',content:' + json.dumps(project.content) + ',organiser:' + json.dumps(project.organiser) \
           + ',target:' + json.dumps(str(project.target)) + ',email:' + json.dumps(project.email) \
           + ',imgfile:' + json.dumps(project.imgfile) + ',pcount:' + json.dumps(str(project.pcount)) \
           + ',mcount:' + json.dumps(str(project.mcount)) + '}'
    return data


# build a json string from a project, no state and startdate
# use json.dumps to ensure making URLencode
def _buildJsonQuestionnair(questionnair):
    data = '{id:' + json.dumps(str(questionnair.id)) + ',name:' + json.dumps(questionnair.name) \
           + ',organiser:' + json.dumps(questionnair.organiser) + ',money:' + json.dumps(str(questionnair.money)) \
           + ',email:' + json.dumps(questionnair.email) + ',url:' + json.dumps(questionnair.url) \
           + ',pcount:' + json.dumps(str(questionnair.pcount)) + ',mcount:' + json.dumps(str(questionnair.mcount)) + '}'
    return data


# build a json string from projects
def _buildJsonData(datas, type):
    if type == 'p':
        return '[' + ','.join([_buildJsonProject(project) for project in datas]) + ']'
    else:
        return '[' + ','.join([_buildJsonQuestionnair(questionnair) for questionnair in datas]) + ']'


# list all projects into a json string
def listp(request):
    projects = Project.objects.filter(state=True).order_by('id')
    return HttpResponse(_buildJsonData(projects, 'p'), content_type="application/json")


# list all projects into a json string
def listq(request):
    questions = Questionnair.objects.filter(state=True).order_by('id')
    return HttpResponse(_buildJsonData(questions, 'q'), content_type="application/json")


# import qiniu
# import qiniu.conf
# import qiniu.rs
# import qiniu.io
# BUCKET_NAME = "shanshanlaichi"
# qiniu.conf.ACCESS_KEY = "jkGarjPB6G-3YqyDwj2JU_CzianXBn5OLNpnhmaC"
# qiniu.conf.SECRET_KEY = "qHMNLS9x2lPD2M-oF-Dx_IPPUPfdP9kCbsvrAT9T"
#
# def uptoken(request):
# policy = qiniu.rs.PutPolicy(BUCKET_NAME)
# token = policy.token()
# data = {'uptoken': token}
# return HttpResponse(json.dumps(data), content_type="application/json")
